C51 COMPILER V9.60.0.0   UART                                                              02/13/2020 01:58:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\UART.OBJ
COMPILER INVOKED BY: Z:\home\vyldram\SimplicityStudio_v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe /home/vyldram/G
                    -it/C8051F340/C8051F340_UART/UART.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPE
                    -ED) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/vyldram/SimplicityStudio_v4/developer/toolchains/keil_8051/9.60/INC/SiLABS
                    -/shared/si8051Base;/home/vyldram/Git/C8051F340/C8051F340_UART) PRINT(.\UART.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJE
                    -CT(.\UART.OBJ)

line level    source

   1          /*
   2           * UART.c
   3           *
   4           *  Created on: 12/02/2020
   5           *      Author: vyldram
   6           */
   7          
   8          #include <UART.h>
   9          
  10          pdata uint8_t Uart0_u8TxBuffer[UART0_TXMAX]={0};
  11          volatile uint8_t* Uart0_pu8PutTx=&Uart0_u8TxBuffer[0];
  12          volatile uint8_t* Uart0_pu8GetTx=&Uart0_u8TxBuffer[0];
  13          int8_t  Uart0_s8TxCounter=0;
  14          int8_t  Uart_s8TxInit=0;
  15          
  16          
  17          pdata uint8_t Uart0_u8RxBuffer[UART0_RXMAX]={0};
  18          volatile uint8_t* Uart0_pu8PutRx=&Uart0_u8RxBuffer[0];
  19          volatile uint8_t* Uart0_pu8GetRx=&Uart0_u8RxBuffer[0];
  20          int8_t  Uart0_s8RxCounter=0;
  21          
  22          UART0_nStatus UART0_vInit(unsigned long u32BaudRate)
  23          {
  24   1          UART0_nStatus enStatus= UART0_enOK;
  25   1          TIMER1_nStatus enStatusTim= TIMER1_enOK;
  26   1      
  27   1          /*
  28   1           * Initializing GPIO for UART0 (P0.4 TX0, P0.5 RX0)
  29   1           */
  30   1      
  31   1              /*RX and TX configured as Digital Input*/
  32   1              P0MDIN|=0x30;
  33   1      
  34   1              /*RX configured as Open Drain Output*/
  35   1              P0MDOUT&=~(0x20);
  36   1              P0|=(0x20);
  37   1      
  38   1              /*TX configured as push-pull Output*/
  39   1              P0MDOUT|=0x10;
  40   1      
  41   1              /*TX and RX is not skipped from CrossBar*/
  42   1              P0SKIP&=~0x30;
  43   1      
  44   1      
  45   1              /* Activate UART crossbar*/
  46   1              XBR0|=0x1;
  47   1      
  48   1              /*CrossBar enable*/
  49   1              XBR1|=0x40;
  50   1      
  51   1              enStatusTim =TIMER1_vInit(u32BaudRate);
  52   1              if(enStatusTim == TIMER1_enERROR)
C51 COMPILER V9.60.0.0   UART                                                              02/13/2020 01:58:58 PAGE 2   

  53   1                      return UART0_enERROR;
  54   1      
  55   1              /* UART0 configuration
  56   1               * 8-bit
  57   1               * Multiprocessor disable
  58   1               * UART0 reception enable
  59   1               */
  60   1              SCON0=0x40; //inital value
  61   1              SCON0|=0x10;
  62   1      
  63   1              return UART0_enOK;
  64   1      }
  65          
  66          void UART0_vSend(unsigned char u8Value)
  67          {
  68   1              SBUF0=u8Value;
  69   1              while((SCON0&0x2)==0);
  70   1              SCON0&=~0x2;
  71   1      }
  72          
  73          TIMER1_nStatus TIMER1_vInit(unsigned long u32BaudRate)
  74          {
  75   1              float fCont=500000.0; //500Khz 1MHz/2
  76   1              uint8_t u8Cont=0; //500Khz 1MHz/2
  77   1              float fCont24=24000000.0; //24Mhz 48MHz/2
  78   1              uint8_t u8Cont24=0; //500Khz 1MHz/2
  79   1              float fError=0.0;
  80   1              float fError24=0.0;
  81   1      
  82   1              uint8_t u8Value=0;
  83   1      
  84   1              if(u32BaudRate<94000)
  85   1              {
  86   2                      fCont/=(float)u32BaudRate;
  87   2                      fCont+=0.5;
  88   2                      u8Cont= (uint8_t)fCont;
  89   2                      u8Value=256-(uint8_t)u8Cont;
  90   2                      CKCON&=~0x8; //TIM1 clk = sysclk/div
  91   2              }
  92   1              else if(u32BaudRate<500000)
  93   1              {
  94   2                      fCont/=(float)u32BaudRate;
  95   2                      u8Cont= (uint8_t)fCont;
  96   2                      fError= fCont- (float)u8Cont;
  97   2      
  98   2                      fCont24/=(float)u32BaudRate;
  99   2                      u8Cont24= (uint8_t)fCont24;
 100   2                      fError24= fCont24- (float)u8Cont24;
 101   2      
 102   2                      if(fError < fError24)
 103   2                      {
 104   3                              fCont+=0.5;
 105   3                              u8Cont= (uint8_t)fCont;
 106   3                              CKCON&=~0x8; //TIM1 clk = sysclk/div
 107   3                      }
 108   2                      else
 109   2                      {
 110   3                              fCont24+=0.5;
 111   3                              u8Cont= (uint8_t)fCont24;
 112   3      
 113   3                              CKCON|=0x8; //TIM1 clk = sysclk
 114   3                      }
 115   2      
C51 COMPILER V9.60.0.0   UART                                                              02/13/2020 01:58:58 PAGE 3   

 116   2      
 117   2              }
 118   1              else if(u32BaudRate<=1000000)
 119   1              {
 120   2                      fCont24/=(float)u32BaudRate;
 121   2                      fCont24+=0.5;
 122   2                      u8Cont= (uint8_t)fCont24;
 123   2                      CKCON|=0x8; //TIM1 clk = sysclk
 124   2              }
 125   1              else return TIMER1_enERROR;
 126   1      
 127   1      
 128   1              u8Value=256-(uint8_t)u8Cont;
 129   1      
 130   1              CKCON&=~0x3;
 131   1              CKCON|=2;       //sysclk/48= 1MHz
 132   1      
 133   1              TMOD&=~0x30;
 134   1              TMOD|=0x20; //TIM1 autoreload
 135   1              TMOD&=~0x40; //TIM1 timer function
 136   1              TMOD&=~0x80; //timer1 active without external pin
 137   1      
 138   1      
 139   1              TH1=u8Value;
 140   1              TL1=0;
 141   1      
 142   1              TCON|=0x40; //enable TIM1
 143   1      
 144   1              return TIMER1_enOK;
 145   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    644    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      8    ----
   DATA SIZE        =     15      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
